import discord
from discord.ext import commands, tasks
import sqlite3
import datetime
import os
from dotenv import load_dotenv
import asyncio
import aiohttp
import io
from PIL import Image, ImageFilter, ImageEnhance, ImageOps
import pytesseract
import re
import numpy as np
import colorsys
import logging
import threading
from database import init_db, get_db_connection

pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot_debug.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

TOKEN = os.getenv('DISCORD_TOKEN')
if not TOKEN:
    logger.error("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    exit(1)

intents = discord.Intents.default()
intents.reactions = True
intents.members = True
intents.message_content = True

bot = commands.Bot(command_prefix='!', intents=intents)

# –°–ª–æ–≤–∞—Ä—å —Å –±–æ—Å—Å–∞–º–∏ –∏ –∏—Ö —Ä–µ—Å–ø–∞—É–Ω–æ–º (–≤ —á–∞—Å–∞—Ö)
BOSS_RESPAWNS = {
    "Venatus - 60 LV": 10,
    "Viorent - 65 LV": 10,
    "Ego - 70 LV": 21,
    "Livera - 75 LV": 24,
    "Araneo - 75 LV": 24,
    "Undomiel - 80 LV": 24,
    "Lady Dalia 85 LV": 18,
    "Amentis - 88 LV": 29,
    "Baron - 88 LV": 32,
    "Wannitas - 93 LV": 48,
    "Metus - 93 LV": 48,
    "Sapgirus - 80 LV": 168,
    "Neutro 80 LV": 168,
    "Clemantis - 70 LV": 168
}

# –°–ø–∏—Å–æ–∫ –±–æ—Å—Å–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
BOSS_LIST = list(BOSS_RESPAWNS.keys())

# –≠–º–æ–¥–∑–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –±–æ—Å—Å–æ–≤
BOSS_EMOJIS = [
    '1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£',
    '6Ô∏è‚É£', '7Ô∏è‚É£', '8Ô∏è‚É£', '9Ô∏è‚É£', 'üîü',
    '‚è∏Ô∏è', 'üîØ', '‚ú≥Ô∏è', 'üîÑ'
]

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
os.makedirs('loot_screenshots', exist_ok=True)
os.makedirs('temp_images', exist_ok=True)
os.makedirs('debug_images', exist_ok=True)  # –î–ª—è –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π


# –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def run_web_app():
    import web_app
    web_app.app.run()


@bot.event
async def on_ready():
    logger.info(f'–ë–æ—Ç {bot.user} –∑–∞–ø—É—â–µ–Ω!')
    init_db()
    check_respawns.start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    web_thread = threading.Thread(target=run_web_app)
    web_thread.daemon = True
    web_thread.start()
    logger.info("–í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://0.0.0.0:8080")
# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
def get_db_connection():
    conn = sqlite3.connect('crp_clan.db')
    conn.row_factory = sqlite3.Row
    return conn


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def migrate_database():
    conn = get_db_connection()
    cursor = conn.cursor()

    cursor.execute("PRAGMA table_info(boss_kills)")
    columns = [column[1] for column in cursor.fetchall()]

    if 'is_killed' not in columns:
        cursor.execute("ALTER TABLE boss_kills ADD COLUMN is_killed INTEGER DEFAULT 0")

    if 'respawn_notified' not in columns:
        cursor.execute("ALTER TABLE boss_kills ADD COLUMN respawn_notified INTEGER DEFAULT 0")

    if 'channel_id' not in columns:
        cursor.execute("ALTER TABLE boss_kills ADD COLUMN channel_id INTEGER")

    cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='boss_loot'")
    if not cursor.fetchone():
        cursor.execute('''
            CREATE TABLE boss_loot (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                boss_kill_id INTEGER,
                user_id INTEGER,
                username TEXT,
                screenshot_path TEXT,
                loot_text TEXT,
                created_at TEXT,
                FOREIGN KEY (boss_kill_id) REFERENCES boss_kills (id)
            )
        ''')

    conn.commit()
    conn.close()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü
def init_db():
    conn = get_db_connection()
    cursor = conn.cursor()

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS boss_kills (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            boss_name TEXT,
            kill_time TEXT,
            respawn TEXT,
            message_id INTEGER,
            channel_id INTEGER,
            is_killed INTEGER DEFAULT 0,
            respawn_notified INTEGER DEFAULT 0
        )
    ''')

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS boss_attendance (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            boss_kill_id INTEGER,
            user_id INTEGER,
            username TEXT,
            attended INTEGER DEFAULT 0,
            FOREIGN KEY (boss_kill_id) REFERENCES boss_kills (id)
        )
    ''')

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS boss_loot (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            boss_kill_id INTEGER,
            user_id INTEGER,
            username TEXT,
            screenshot_path TEXT,
            loot_text TEXT,
            created_at TEXT,
            FOREIGN KEY (boss_kill_id) REFERENCES boss_kills (id)
        )
    ''')

    conn.commit()
    conn.close()

    migrate_database()


@bot.event
async def on_ready():
    logger.info(f'–ë–æ—Ç {bot.user} –∑–∞–ø—É—â–µ–Ω!')
    init_db()
    check_respawns.start()


# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ—Å–ø–∞–≤–Ω–æ–≤ –±–æ—Å—Å–æ–≤
@tasks.loop(minutes=5)
async def check_respawns():
    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏ (–ø–æ—Å–ª–µ–¥–Ω–µ–µ —É–±–∏–π—Å—Ç–≤–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–æ—Å—Å–∞)
        cursor.execute('''
            SELECT bk1.* 
            FROM boss_kills bk1
            INNER JOIN (
                SELECT boss_name, MAX(id) as max_id
                FROM boss_kills
                GROUP BY boss_name
            ) bk2 ON bk1.id = bk2.max_id
            WHERE bk1.respawn_notified = 0 AND bk1.is_killed = 1
        ''')

        bosses_to_respawn = cursor.fetchall()
        now = datetime.datetime.now()

        for boss in bosses_to_respawn:
            try:
                respawn_time = datetime.datetime.strptime(boss['respawn'], "%d.%m.%y-%H:%M")

                if now >= respawn_time:
                    channel = bot.get_channel(boss['channel_id'])
                    if channel:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä—è–º–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –±–æ—Å—Å–∞
                        message = await channel.send(
                            f"@everyone\n"
                            f"üî• –ë–û–°–° –ü–û–Ø–í–ò–õ–°–Ø!\n"
                            f"{boss['boss_name']} - —Å–µ–π—á–∞—Å –ø–æ—è–≤–∏—Ç—Å—è\n\n"
                            f"–ü–æ—Å—Ç–∞–≤—å—Ç–µ —Ä–µ–∞–∫—Ü–∏—é ‚úÖ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ —É—á–∞—Å—Ç–∏—è –Ω–∞ –±–æ—Å—Å–µ\n\n"
                            f"üìç –î–µ–π—Å—Ç–≤–∏—è\n"
                            f"‚úÖ - –£—á–∞—Å—Ç–≤—É—é –≤ —É–±–∏–π—Å—Ç–≤–µ –±–æ—Å—Å–∞\n"
                            f"üí¨ - –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º –¥—Ä–æ–ø–∞ —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å —É–±–∏–π—Å—Ç–≤–æ –±–æ—Å—Å–∞"
                        )

                        await message.add_reaction('‚úÖ')

                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è –±–æ—Å—Å–∞
                        new_kill_time = (now + datetime.timedelta(minutes=5)).strftime("%d.%m.%y-%H:%M")
                        respawn_hours = BOSS_RESPAWNS.get(boss['boss_name'], 24)  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 24 —á–∞—Å–∞
                        new_respawn_time = (now + datetime.timedelta(hours=respawn_hours)).strftime("%d.%m.%y-%H:%M")

                        cursor.execute(
                            'INSERT INTO boss_kills (boss_name, kill_time, respawn, message_id, channel_id) VALUES (?, ?, ?, ?, ?)',
                            (boss['boss_name'], new_kill_time, new_respawn_time, message.id, channel.id)
                        )

                        # –ü–æ–º–µ—á–∞–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é
                        cursor.execute(
                            'UPDATE boss_kills SET respawn_notified = 1 WHERE id = ?',
                            (boss['id'],)
                        )

                        conn.commit()
                        logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –±–æ—Å—Å–∞ {boss['boss_name']}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ—Å–ø–∞–≤–Ω–∞ –±–æ—Å—Å–∞ {boss['boss_name']}: {e}")

        conn.close()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ check_respawns: {e}")

def save_debug_image(image, name):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    debug_path = f"debug_images/{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}_{name}.png"
    image.save(debug_path, 'PNG')
    return debug_path


def extract_items(text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –º–µ–∂–¥—É 'acquired' –∏ 'from'"""
    logger.info("–ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞")

    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–µ–∫—Å—Ç–∞ –º–µ–∂–¥—É "acquired" –∏ "from"
    pattern = r'acquired\s+(.*?)\s+from'
    items = re.findall(pattern, text, re.IGNORECASE)

    # –û—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    cleaned_items = []
    for item in items:
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        cleaned_item = ' '.join(item.split())
        # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ç–æ—á–∫–∏ –∏ –∑–∞–ø—è—Ç—ã–µ –≤ –∫–æ–Ω—Ü–µ
        cleaned_item = cleaned_item.rstrip('.,')
        cleaned_items.append(cleaned_item)

    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(cleaned_items)} –ø—Ä–µ–¥–º–µ—Ç–æ–≤")
    return cleaned_items


def enhance_gray(image):
    """–í–∞—Ä–∏–∞–Ω—Ç 1: –ø—Ä–æ—Å—Ç–∞—è –±–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏—è"""
    logger.info("–ü—Ä–∏–º–µ–Ω—è–µ–º —Å–µ—Ä—ã–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    img = image.convert("L")  # –≤ —Å–µ—Ä—ã–π
    img = ImageOps.autocontrast(img)
    img = ImageOps.invert(img)  # —Ç–µ–∫—Å—Ç —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —á—ë—Ä–Ω—ã–º
    enhancer = ImageEnhance.Sharpness(img)
    img = enhancer.enhance(2.0)
    enhancer = ImageEnhance.Contrast(img)
    img = enhancer.enhance(2.0)
    return img


def enhance_hsv(image):
    """–í–∞—Ä–∏–∞–Ω—Ç 2: HSV —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ü–≤–µ—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
    logger.info("–ü—Ä–∏–º–µ–Ω—è–µ–º HSV –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    img = image.convert("RGB")
    img_array = np.array(img)

    # RGB ‚Üí HSV
    hsv_array = np.zeros_like(img_array, dtype=float)
    for y in range(img_array.shape[0]):
        for x in range(img_array.shape[1]):
            r, g, b = img_array[y, x] / 255.0
            h, s, v = colorsys.rgb_to_hsv(r, g, b)
            hsv_array[y, x] = [h * 360, s * 100, v * 100]

    # –î–∏–∞–ø–∞–∑–æ–Ω—ã —Ü–≤–µ—Ç–æ–≤ (H, S, V)
    ranges = [
        ((0, 10), (50, 100), (30, 100)),  # –∫—Ä–∞—Å–Ω—ã–π 1
        ((340, 360), (50, 100), (30, 100)),  # –∫—Ä–∞—Å–Ω—ã–π 2
        ((80, 150), (30, 100), (30, 100)),  # –∑–µ–ª—ë–Ω—ã–π
        ((180, 260), (30, 100), (30, 100)),  # —Å–∏–Ω–∏–π
        ((260, 320), (30, 100), (30, 100)),  # —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
        ((30, 70), (30, 100), (30, 100)),  # –∂—ë–ª—Ç—ã–π
        ((0, 360), (0, 20), (40, 100)),  # —Å–µ—Ä—ã–π/–±–µ–ª—ã–π –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
    ]

    # –ú–∞—Å–∫–∞ —Ç–µ–∫—Å—Ç–∞
    h, s, v = hsv_array[:, :, 0], hsv_array[:, :, 1], hsv_array[:, :, 2]
    text_mask = np.zeros(img_array.shape[:2], dtype=bool)
    for h_range, s_range, v_range in ranges:
        mask = ((h >= h_range[0]) & (h <= h_range[1]) &
                (s >= s_range[0]) & (s <= s_range[1]) &
                (v >= v_range[0]) & (v <= v_range[1]))
        text_mask |= mask

    # –ß—ë—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –±–µ–ª–æ–º —Ñ–æ–Ω–µ
    enhanced_array = np.ones_like(img_array) * 255
    enhanced_array[text_mask] = [0, 0, 0]
    return Image.fromarray(enhanced_array.astype("uint8"))


def enhance_image_for_ocr(image):
    """–ì–∏–±—Ä–∏–¥: –ø—Ä–æ–±—É–µ–º –¥–≤–∞ –º–µ—Ç–æ–¥–∞ –∏ –≤—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
    original_path = save_debug_image(image, "01_original")
    logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {original_path}")

    # –ü—Ä–æ–±—É–µ–º –æ–±–∞ –º–µ—Ç–æ–¥–∞
    gray_variant = enhance_gray(image)
    hsv_variant = enhance_hsv(image)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    gray_path = save_debug_image(gray_variant, "02_gray_method")
    logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å–µ—Ä–æ–≥–æ –º–µ—Ç–æ–¥–∞: {gray_path}")
    hsv_path = save_debug_image(hsv_variant, "03_hsv_method")
    logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ HSV –º–µ—Ç–æ–¥–∞: {hsv_path}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º OCR –Ω–∞ –æ–±–æ–∏—Ö
    custom_config = r'--oem 3 --psm 6'
    text_gray = pytesseract.image_to_string(gray_variant, lang='eng', config=custom_config)
    text_hsv = pytesseract.image_to_string(hsv_variant, lang='eng', config=custom_config)

    # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–∏–º–≤–æ–ª–æ–≤
    if len(text_hsv.strip()) > len(text_gray.strip()):
        best_img = hsv_variant
        best_text = text_hsv
        method = "HSV"
        logger.info(f"–í—ã–±—Ä–∞–Ω –º–µ—Ç–æ–¥ HSV, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤: {len(text_hsv.strip())}")
    else:
        best_img = gray_variant
        best_text = text_gray
        method = "GRAY"
        logger.info(f"–í—ã–±—Ä–∞–Ω –º–µ—Ç–æ–¥ GRAY, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤: {len(text_gray.strip())}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    final_path = save_debug_image(best_img, f"04_final_{method}")
    logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {final_path}")

    return best_img, best_text, method


async def process_image_with_ocr(image_url):
    try:
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_url}")

        async with aiohttp.ClientSession() as session:
            async with session.get(image_url) as resp:
                if resp.status == 200:
                    image_data = await resp.read()
                    image = Image.open(io.BytesIO(image_data))

                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    if image.mode != 'RGB':
                        image = image.convert('RGB')

                    # –£–ª—É—á—à–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
                    enhanced_image, text, method = enhance_image_for_ocr(image)

                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞
                    items = extract_items(text)

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–ø–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    temp_path = f"temp_images/{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.png"
                    enhanced_image.save(temp_path, 'PNG')
                    logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {temp_path}")

                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º OCR –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
                    configs = [
                        r'--oem 3 --psm 6',
                        r'--oem 3 --psm 7',
                        r'--oem 3 --psm 8',
                        r'--oem 3 --psm 13'
                    ]

                    best_text = text
                    best_config = ""

                    for config in configs:
                        try:
                            new_text = pytesseract.image_to_string(enhanced_image, lang='eng', config=config)
                            logger.info(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –∫–æ–Ω—Ñ–∏–≥–æ–º {config}:\n{new_text}")

                            # –ï—Å–ª–∏ —ç—Ç–æ—Ç –∫–æ–Ω—Ñ–∏–≥ –¥–∞–ª –±–æ–ª—å—à–µ —Ç–µ–∫—Å—Ç–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
                            if len(new_text) > len(best_text):
                                best_text = new_text
                                best_config = config
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ —Å –∫–æ–Ω—Ñ–∏–≥–æ–º {config}: {e}")

                    logger.info(f"–õ—É—á—à–∏–π –∫–æ–Ω—Ñ–∏–≥: {best_config}")
                    logger.info(f"–õ—É—á—à–∏–π —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n{best_text}")

                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑ –ª—É—á—à–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
                    final_items = extract_items(best_text)

                    return final_items, temp_path
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: —Å—Ç–∞—Ç—É—Å {resp.status}")
                    return [], None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return [], None


@bot.command()
async def spawn(ctx):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –±–æ—Å—Å–∞ —á–µ—Ä–µ–∑ —Ä–µ–∞–∫—Ü–∏–∏"""
    embed = discord.Embed(
        title="–í—ã–±–µ—Ä–∏—Ç–µ –±–æ—Å—Å–∞ –∫–æ—Ç–æ—Ä—ã–π –ø–æ—è–≤–∏–ª—Å—è",
        description="–ü–æ—Å—Ç–∞–≤—å—Ç–µ —Ä–µ–∞–∫—Ü–∏—é —Å –Ω–æ–º–µ—Ä–æ–º –±–æ—Å—Å–∞:",
        color=0x00ff00
    )

    for i, boss in enumerate(BOSS_LIST):
        embed.add_field(
            name=f"{BOSS_EMOJIS[i]} {boss}",
            value=f"–†–µ—Å–ø–∞–≤–Ω: {BOSS_RESPAWNS[boss]} —á–∞—Å–æ–≤",
            inline=False
        )

    message = await ctx.send(embed=embed)

    for i in range(len(BOSS_LIST)):
        await message.add_reaction(BOSS_EMOJIS[i])

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {ctx.author} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É !spawn")


@bot.event
async def on_reaction_add(reaction, user):
    if user.bot:
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –±–æ—Å—Å–∞ —á–µ—Ä–µ–∑ —Ä–µ–∞–∫—Ü–∏–∏
    if str(reaction.emoji) in BOSS_EMOJIS and reaction.message.author == bot.user:
        if not reaction.message.embeds:
            return

        embed = reaction.message.embeds[0]
        if embed.title != "–í—ã–±–µ—Ä–∏—Ç–µ –±–æ—Å—Å–∞ –∫–æ—Ç–æ—Ä—ã–π –ø–æ—è–≤–∏–ª—Å—è":
            return

        boss_index = BOSS_EMOJIS.index(str(reaction.emoji))
        if boss_index >= len(BOSS_LIST):
            return

        boss_name = BOSS_LIST[boss_index]
        await reaction.message.delete()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –≤—ã–±—Ä–∞–ª –±–æ—Å—Å–∞: {boss_name}")

        channel = discord.utils.get(reaction.message.guild.channels, name="boss_alert")
        if not channel:
            channel = reaction.message.channel

        conn = get_db_connection()
        cursor = conn.cursor()

        # –ü–æ–º–µ—á–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞–ø–∏—Å–∏ —ç—Ç–æ–≥–æ –±–æ—Å—Å–∞ –∫–∞–∫ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ
        cursor.execute(
            'UPDATE boss_kills SET is_killed = 1, respawn_notified = 1 WHERE boss_name = ? AND is_killed = 0',
            (boss_name,)
        )

        message = await channel.send(
            f"@everyone\n"
            f"üî• –ë–û–°–° –ü–û–Ø–í–ò–õ–°–Ø!\n"
            f"{boss_name} - —Å–µ–π—á–∞—Å –ø–æ—è–≤–∏—Ç—Å—è\n\n"
            f"–ü–æ—Å—Ç–∞–≤—å—Ç–µ —Ä–µ–∞–∫—Ü–∏—é ‚úÖ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ —É—á–∞—Å—Ç–∏—è –Ω–∞ –±–æ—Å—Å–µ\n\n"
            f"üìç –î–µ–π—Å—Ç–≤–∏—è\n"
            f"‚úÖ - –£—á–∞—Å—Ç–≤—É—é –≤ —É–±–∏–π—Å—Ç–≤–µ –±–æ—Å—Å–∞\n"
            f"üí¨ - –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º –¥—Ä–æ–ø–∞ —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å —É–±–∏–π—Å—Ç–≤–æ –±–æ—Å—Å–∞"
        )

        await message.add_reaction('‚úÖ')

        now = datetime.datetime.now()
        kill_time = (now + datetime.timedelta(minutes=5)).strftime("%d.%m.%y-%H:%M")
        respawn_hours = BOSS_RESPAWNS[boss_name]
        respawn_time = (now + datetime.timedelta(hours=respawn_hours)).strftime("%d.%m.%y-%H:%M")

        cursor.execute(
            'INSERT INTO boss_kills (boss_name, kill_time, respawn, message_id, channel_id) VALUES (?, ?, ?, ?, ?)',
            (boss_name, kill_time, respawn_time, message.id, channel.id)
        )
        conn.commit()
        conn.close()

        logger.info(f"–°–æ–∑–¥–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–æ—Å—Å–µ {boss_name} (ID —Å–æ–æ–±—â–µ–Ω–∏—è: {message.id})")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—á–∞—Å—Ç–∏—è –≤ —É–±–∏–π—Å—Ç–≤–µ –±–æ—Å—Å–∞
    if str(reaction.emoji) == "‚úÖ" and reaction.message.channel.name == "boss_alert":
        conn = get_db_connection()
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å (–ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ –±–æ—Å—Å–∞)
        cursor.execute('''
            SELECT id, is_killed 
            FROM boss_kills 
            WHERE message_id = ? 
            AND id = (
                SELECT MAX(id) 
                FROM boss_kills 
                WHERE boss_name = (
                    SELECT boss_name 
                    FROM boss_kills 
                    WHERE message_id = ?
                )
            )
        ''', (reaction.message.id, reaction.message.id))

        boss_kill = cursor.fetchone()

        if boss_kill and not boss_kill['is_killed']:
            cursor.execute(
                'SELECT * FROM boss_attendance WHERE boss_kill_id = ? AND user_id = ?',
                (boss_kill['id'], user.id)
            )
            existing = cursor.fetchone()

            if not existing:
                cursor.execute(
                    'INSERT INTO boss_attendance (boss_kill_id, user_id, username, attended) VALUES (?, ?, ?, 1)',
                    (boss_kill['id'], user.id, str(user))
                )
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –¥–æ–±–∞–≤–ª–µ–Ω –∫ —É—á–∞—Å—Ç–∏—é –≤ —É–±–∏–π—Å—Ç–≤–µ –±–æ—Å—Å–∞ (ID: {boss_kill['id']})")
            else:
                cursor.execute(
                    'UPDATE boss_attendance SET attended = 1 WHERE boss_kill_id = ? AND user_id = ?',
                    (boss_kill['id'], user.id)
                )
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —É—á–∞—Å—Ç–∏–µ –≤ —É–±–∏–π—Å—Ç–≤–µ –±–æ—Å—Å–∞ (ID: {boss_kill['id']})")

            conn.commit()
        conn.close()


@bot.event
async def on_reaction_remove(reaction, user):
    if user.bot:
        return

    if str(reaction.emoji) == "‚úÖ" and reaction.message.channel.name == "boss_alert":
        conn = get_db_connection()
        cursor = conn.cursor()

        cursor.execute(
            'SELECT id FROM boss_kills WHERE message_id = ?',
            (reaction.message.id,)
        )
        boss_kill = cursor.fetchone()

        if boss_kill:
            cursor.execute(
                'UPDATE boss_attendance SET attended = 0 WHERE boss_kill_id = ? AND user_id = ?',
                (boss_kill['id'], user.id)
            )
            conn.commit()
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –æ—Ç–º–µ–Ω–∏–ª —É—á–∞—Å—Ç–∏–µ –≤ —É–±–∏–π—Å—Ç–≤–µ –±–æ—Å—Å–∞ (ID: {boss_kill['id']})")
        conn.close()


@bot.event
async def on_message(message):
    if message.author.bot:
        await bot.process_commands(message)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –±–æ—Å—Å–∞—Ö
    if message.reference and message.reference.message_id:
        try:
            replied_message = await message.channel.fetch_message(message.reference.message_id)

            if (replied_message.author == bot.user and
                    replied_message.channel.name == "boss_alert" and
                    "üî• –ë–û–°–° –ü–û–Ø–í–ò–õ–°–Ø!" in replied_message.content):

                conn = get_db_connection()
                cursor = conn.cursor()

                # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å (–ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ –±–æ—Å—Å–∞)
                cursor.execute('''
                    SELECT id, is_killed 
                    FROM boss_kills 
                    WHERE message_id = ? 
                    AND id = (
                        SELECT MAX(id) 
                        FROM boss_kills 
                        WHERE boss_name = (
                            SELECT boss_name 
                            FROM boss_kills 
                            WHERE message_id = ?
                        )
                    )
                ''', (replied_message.id, replied_message.id))

                boss_kill = cursor.fetchone()

                if boss_kill and not boss_kill['is_killed']:
                    # –ü–æ–º–µ—á–∞–µ–º –±–æ—Å—Å–∞ –∫–∞–∫ —É–±–∏—Ç–æ–≥–æ
                    cursor.execute(
                        'UPDATE boss_kills SET is_killed = 1 WHERE id = ?',
                        (boss_kill['id'],)
                    )

                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–ª–æ–∂–µ–Ω–∏—è (—Å–∫—Ä–∏–Ω—à–æ—Ç—ã –¥—Ä–æ–ø–∞)
                    loot_items = []
                    screenshot_path = None

                    if message.attachments:
                        for attachment in message.attachments:
                            if any(attachment.filename.lower().endswith(ext) for ext in
                                   ['.png', '.jpg', '.jpeg', '.gif', '.bmp']):
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
                                screenshot_path = f"loot_screenshots/{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}_{attachment.filename}"
                                await attachment.save(screenshot_path)
                                logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω —Å–∫—Ä–∏–Ω—à–æ—Ç –¥—Ä–æ–ø–∞: {screenshot_path}")

                                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Å –ø–æ–º–æ—â—å—é OCR
                                items, _ = await process_image_with_ocr(attachment.url)
                                loot_items.extend(items)

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥—Ä–æ–ø–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    loot_text = "\n".join(loot_items) if loot_items else "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥—Ä–æ–ø"

                    cursor.execute(
                        'INSERT INTO boss_loot (boss_kill_id, user_id, username, screenshot_path, loot_text, created_at) VALUES (?, ?, ?, ?, ?, ?)',
                        (boss_kill['id'], message.author.id, str(message.author), screenshot_path, loot_text,
                         datetime.datetime.now().strftime("%d.%m.%y-%H:%M"))
                    )

                    conn.commit()

                    # –£–¥–∞–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é ‚úÖ –∏ –¥–æ–±–∞–≤–ª—è–µ–º ‚ò†Ô∏è
                    await replied_message.clear_reactions()
                    await replied_message.add_reaction('‚ò†Ô∏è')

                    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–æ—Å—Å–µ
                    new_content = replied_message.content.replace(
                        "üí¨ - –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º –¥—Ä–æ–ø–∞ —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å —É–±–∏–π—Å—Ç–≤–æ –±–æ—Å—Å–∞",
                        "‚ò†Ô∏è - –ë–æ—Å—Å —É–±–∏—Ç! –û—Ç–º–µ—Ç–∫–∏ —É—á–∞—Å—Ç–∏—è –∑–∞–∫—Ä—ã—Ç—ã."
                    )
                    await replied_message.edit(content=new_content)

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥—Ä–æ–ø–µ
                    if loot_items:
                        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ (–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤ 5 —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
                        loot_info = "\n".join([f"‚Ä¢ {item}" for item in loot_items])

                        # –ï—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –º–Ω–æ–≥–æ, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Discord - 2000 —Å–∏–º–≤–æ–ª–æ–≤)
                        if len(loot_info) > 1900:
                            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
                            parts = []
                            current_part = ""

                            for item in loot_items:
                                item_line = f"‚Ä¢ {item}\n"
                                if len(current_part) + len(item_line) > 1900:
                                    parts.append(current_part)
                                    current_part = item_line
                                else:
                                    current_part += item_line

                            if current_part:
                                parts.append(current_part)

                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                            await message.channel.send(
                                f"{message.author.mention} –æ—Ç–º–µ—Ç–∏–ª(–∞) —É–±–∏–π—Å—Ç–≤–æ –±–æ—Å—Å–∞!\n"
                                f"üì¶ –í—ã–±–∏—Ç—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã (—á–∞—Å—Ç—å 1 –∏–∑ {len(parts)}):\n{parts[0]}"
                            )

                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏
                            for i, part in enumerate(parts[1:], 2):
                                await message.channel.send(
                                    f"üì¶ –í—ã–±–∏—Ç—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã (—á–∞—Å—Ç—å {i} –∏–∑ {len(parts)}):\n{part}"
                                )
                        else:
                            await message.channel.send(
                                f"{message.author.mention} –æ—Ç–º–µ—Ç–∏–ª(–∞) —É–±–∏–π—Å—Ç–≤–æ –±–æ—Å—Å–∞!\n"
                                f"üì¶ –í—ã–±–∏—Ç—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:\n{loot_info}"
                            )

                        logger.info(f"–£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã –ø—Ä–µ–¥–º–µ—Ç—ã: {loot_items}")
                    else:
                        await message.channel.send(
                            f"{message.author.mention} –æ—Ç–º–µ—Ç–∏–ª(–∞) —É–±–∏–π—Å—Ç–≤–æ –±–æ—Å—Å–∞!\n"
                            f"üì¶ –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."
                        )
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ {screenshot_path}")

                conn.close()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    await bot.process_commands(message)




# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥—Ä–æ–ø–∞ —Å –±–æ—Å—Å–∞
@bot.command()
async def loot(ctx, boss_kill_id: int = None):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥—Ä–æ–ø —Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —É–±–∏–π—Å—Ç–≤–∞ –±–æ—Å—Å–∞"""
    conn = get_db_connection()
    cursor = conn.cursor()

    if boss_kill_id:
        cursor.execute(
            'SELECT bl.*, bk.boss_name FROM boss_loot bl JOIN boss_kills bk ON bl.boss_kill_id = bk.id WHERE bl.boss_kill_id = ?',
            (boss_kill_id,)
        )
        loot_data = cursor.fetchall()

        if not loot_data:
            await ctx.send("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –æ –¥—Ä–æ–ø–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ ID —É–±–∏–π—Å—Ç–≤–∞.")
            conn.close()
            return

        embed = discord.Embed(title=f"–î—Ä–æ–ø —Å {loot_data[0]['boss_name']}", color=0x00ff00)

        for loot in loot_data:
            loot_text = loot['loot_text'] if loot['loot_text'] else "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥—Ä–æ–ø"
            embed.add_field(
                name=f"–û—Ç {loot['username']}",
                value=f"```{loot_text[:500]}...```" if len(loot_text) > 500 else f"```{loot_text}```",
                inline=False
            )

        await ctx.send(embed=embed)
        logger.info(f"–ü–æ–∫–∞–∑–∞–Ω –¥—Ä–æ–ø –¥–ª—è —É–±–∏–π—Å—Ç–≤–∞ –±–æ—Å—Å–∞ ID: {boss_kill_id}")
    else:
        cursor.execute('''
            SELECT bk.id, bk.boss_name, bk.kill_time, COUNT(bl.id) as loot_count 
            FROM boss_kills bk 
            LEFT JOIN boss_loot bl ON bk.id = bl.boss_kill_id 
            WHERE bk.is_killed = 1 
            GROUP BY bk.id 
            ORDER BY bk.kill_time DESC 
            LIMIT 5
        ''')
        recent_kills = cursor.fetchall()

        if not recent_kills:
            await ctx.send("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± —É–±–∏–π—Å—Ç–≤–∞—Ö –±–æ—Å—Å–æ–≤.")
            conn.close()
            return

        embed = discord.Embed(title="–ü–æ—Å–ª–µ–¥–Ω–∏–µ —É–±–∏–π—Å—Ç–≤–∞ –±–æ—Å—Å–æ–≤", color=0x00ff00)

        for kill in recent_kills:
            embed.add_field(
                name=f"{kill['boss_name']} ({kill['kill_time']})",
                value=f"ID: {kill['id']}, –î—Ä–æ–ø–æ–≤: {kill['loot_count']}",
                inline=False
            )

        embed.set_footer(text="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ !loot <ID> –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –¥—Ä–æ–ø–∞")
        await ctx.send(embed=embed)
        logger.info("–ü–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ —É–±–∏–π—Å—Ç–≤–∞ –±–æ—Å—Å–æ–≤")

    conn.close()


@bot.command()
async def boss_rate(ctx, member: discord.Member = None):
    if member is None:
        member = ctx.author

    conn = get_db_connection()
    cursor = conn.cursor()

    today = datetime.datetime.now().strftime("%d.%m.%y")
    cursor.execute(
        'SELECT COUNT(*) FROM boss_kills WHERE kill_time LIKE ?',
        (f'{today}%',)
    )
    total_bosses_today = cursor.fetchone()[0] or 0

    cursor.execute(
        '''SELECT COUNT(*) FROM boss_attendance 
           INNER JOIN boss_kills ON boss_attendance.boss_kill_id = boss_kills.id 
           WHERE boss_attendance.user_id = ? AND boss_attendance.attended = 1 
           AND boss_kills.kill_time LIKE ?''',
        (member.id, f'{today}%',)
    )
    attended_today = cursor.fetchone()[0] or 0

    week_ago = (datetime.datetime.now() - datetime.timedelta(days=7)).strftime("%d.%m.%y")
    cursor.execute(
        'SELECT COUNT(*) FROM boss_kills WHERE kill_time >= ?',
        (week_ago,)
    )
    total_bosses_week = cursor.fetchone()[0] or 0

    cursor.execute(
        '''SELECT COUNT(*) FROM boss_attendance 
           INNER JOIN boss_kills ON boss_attendance.boss_kill_id = boss_kills.id 
           WHERE boss_attendance.user_id = ? AND boss_attendance.attended = 1 
           AND boss_kills.kill_time >= ?''',
        (member.id, week_ago)
    )
    attended_week = cursor.fetchone()[0] or 0

    cursor.execute(
        'SELECT COUNT(*) FROM boss_kills'
    )
    total_bosses = cursor.fetchone()[0] or 0

    cursor.execute(
        '''SELECT COUNT(*) FROM boss_attendance 
           INNER JOIN boss_kills ON boss_attendance.boss_kill_id = boss_kills.id 
           WHERE boss_attendance.user_id = ? AND boss_attendance.attended = 1''',
        (member.id,)
    )
    attended_total = cursor.fetchone()[0] or 0

    conn.close()

    rate_today = (attended_today / total_bosses_today * 100) if total_bosses_today > 0 else 0
    rate_week = (attended_week / total_bosses_week * 100) if total_bosses_week > 0 else 0
    rate_total = (attended_total / total_bosses * 100) if total_bosses > 0 else 0

    embed = discord.Embed(title=f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –¥–ª—è {member.display_name}")
    embed.add_field(name="–°–µ–≥–æ–¥–Ω—è", value=f"{attended_today}/{total_bosses_today} ({rate_today:.1f}%)")
    embed.add_field(name="–ó–∞ –Ω–µ–¥–µ–ª—é", value=f"{attended_week}/{total_bosses_week} ({rate_week:.1f}%)")
    embed.add_field(name="–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è", value=f"{attended_total}/{total_bosses} ({rate_total:.1f}%)")

    await ctx.send(embed=embed)
    logger.info(f"–ü–æ–∫–∞–∑–∞–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {member.display_name}")


@bot.event
async def on_command_error(ctx, error):
    if isinstance(error, commands.CommandNotFound):
        await ctx.send("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!")
    else:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {error}")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    try:
        bot.run(TOKEN)
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")