import discord
from discord.ext import commands, tasks
import sqlite3
import datetime
import os
from dotenv import load_dotenv
import asyncio
import aiohttp
import io
from PIL import Image, ImageFilter, ImageEnhance
import pytesseract
import re
import numpy as np
import cv2
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot_debug.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

TOKEN = os.getenv('DISCORD_TOKEN')
if not TOKEN:
    logger.error("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    exit(1)

intents = discord.Intents.default()
intents.reactions = True
intents.members = True
intents.message_content = True

bot = commands.Bot(command_prefix='!', intents=intents)

# –°–ª–æ–≤–∞—Ä—å —Å –±–æ—Å—Å–∞–º–∏ –∏ –∏—Ö —Ä–µ—Å–ø–∞—É–Ω–æ–º (–≤ —á–∞—Å–∞—Ö)
BOSS_RESPAWNS = {
    "Venatus - 60 LV": 10,
    "Viorent - 65 LV": 10,
    "Ego - 70 LV": 21,
    "Livera - 75 LV": 24,
    "Araneo - 75 LV": 24,
    "Undomiel - 80 LV": 24,
    "Lady Dalia 85 LV": 18,
    "Amentis - 88 LV": 29,
    "Baron - 88 LV": 32,
    "Wannitas - 93 LV": 48,
    "Metus - 93 LV": 48,
    "Sapgirus - 80 LV": 168,
    "Neutro 80 LV": 168,
    "Clemantis - 70 LV": 168
}

# –°–ø–∏—Å–æ–∫ –±–æ—Å—Å–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
BOSS_LIST = list(BOSS_RESPAWNS.keys())

# –≠–º–æ–¥–∑–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –±–æ—Å—Å–æ–≤
BOSS_EMOJIS = [
    '1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£',
    '6Ô∏è‚É£', '7Ô∏è‚É£', '8Ô∏è‚É£', '9Ô∏è‚É£', 'üîü',
    '‚è∏Ô∏è', 'üîØ', '‚ú≥Ô∏è', 'üîÑ'
]

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
os.makedirs('loot_screenshots', exist_ok=True)
os.makedirs('temp_images', exist_ok=True)
os.makedirs('debug_images', exist_ok=True)  # –î–ª—è –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π


# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
def get_db_connection():
    conn = sqlite3.connect('crp_clan.db')
    conn.row_factory = sqlite3.Row
    return conn


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def migrate_database():
    conn = get_db_connection()
    cursor = conn.cursor()

    cursor.execute("PRAGMA table_info(boss_kills)")
    columns = [column[1] for column in cursor.fetchall()]

    if 'is_killed' not in columns:
        cursor.execute("ALTER TABLE boss_kills ADD COLUMN is_killed INTEGER DEFAULT 0")

    if 'respawn_notified' not in columns:
        cursor.execute("ALTER TABLE boss_kills ADD COLUMN respawn_notified INTEGER DEFAULT 0")

    if 'channel_id' not in columns:
        cursor.execute("ALTER TABLE boss_kills ADD COLUMN channel_id INTEGER")

    cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='boss_loot'")
    if not cursor.fetchone():
        cursor.execute('''
            CREATE TABLE boss_loot (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                boss_kill_id INTEGER,
                user_id INTEGER,
                username TEXT,
                screenshot_path TEXT,
                loot_text TEXT,
                created_at TEXT,
                FOREIGN KEY (boss_kill_id) REFERENCES boss_kills (id)
            )
        ''')

    conn.commit()
    conn.close()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü
def init_db():
    conn = get_db_connection()
    cursor = conn.cursor()

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS boss_kills (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            boss_name TEXT,
            kill_time TEXT,
            respawn TEXT,
            message_id INTEGER,
            channel_id INTEGER,
            is_killed INTEGER DEFAULT 0,
            respawn_notified INTEGER DEFAULT 0
        )
    ''')

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS boss_attendance (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            boss_kill_id INTEGER,
            user_id INTEGER,
            username TEXT,
            attended INTEGER DEFAULT 0,
            FOREIGN KEY (boss_kill_id) REFERENCES boss_kills (id)
        )
    ''')

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS boss_loot (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            boss_kill_id INTEGER,
            user_id INTEGER,
            username TEXT,
            screenshot_path TEXT,
            loot_text TEXT,
            created_at TEXT,
            FOREIGN KEY (boss_kill_id) REFERENCES boss_kills (id)
        )
    ''')

    conn.commit()
    conn.close()

    migrate_database()


@bot.event
async def on_ready():
    logger.info(f'–ë–æ—Ç {bot.user} –∑–∞–ø—É—â–µ–Ω!')
    init_db()
    check_respawns.start()


# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ—Å–ø–∞–≤–Ω–æ–≤ –±–æ—Å—Å–æ–≤
@tasks.loop(minutes=5)
async def check_respawns():
    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        cursor.execute('''
            SELECT id, boss_name, respawn, channel_id 
            FROM boss_kills 
            WHERE respawn_notified = 0 AND is_killed = 1
        ''')

        bosses_to_respawn = cursor.fetchall()
        now = datetime.datetime.now()

        for boss in bosses_to_respawn:
            try:
                respawn_time = datetime.datetime.strptime(boss['respawn'], "%d.%m.%y-%H:%M")

                if now >= respawn_time:
                    channel = bot.get_channel(boss['channel_id'])
                    if channel:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä—è–º–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –±–æ—Å—Å–∞
                        message = await channel.send(
                            f"@everyone\n"
                            f"üî• –ë–û–°–° –ü–û–Ø–í–ò–õ–°–Ø!\n"
                            f"{boss['boss_name']} - —Å–µ–π—á–∞—Å –ø–æ—è–≤–∏—Ç—Å—è\n\n"
                            f"–ü–æ—Å—Ç–∞–≤—å—Ç–µ —Ä–µ–∞–∫—Ü–∏—é ‚úÖ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ —É—á–∞—Å—Ç–∏—è –Ω–∞ –±–æ—Å—Å–µ\n\n"
                            f"üìç –î–µ–π—Å—Ç–≤–∏—è\n"
                            f"‚úÖ - –£—á–∞—Å—Ç–≤—É—é –≤ —É–±–∏–π—Å—Ç–≤–µ –±–æ—Å—Å–∞\n"
                            f"üí¨ - –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º –¥—Ä–æ–ø–∞ —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å —É–±–∏–π—Å—Ç–≤–æ –±–æ—Å—Å–∞"
                        )

                        await message.add_reaction('‚úÖ')

                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è –±–æ—Å—Å–∞
                        new_kill_time = (now + datetime.timedelta(minutes=5)).strftime("%d.%m.%y-%H:%M")
                        respawn_hours = BOSS_RESPAWNS.get(boss['boss_name'], 24)  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 24 —á–∞—Å–∞
                        new_respawn_time = (now + datetime.timedelta(hours=respawn_hours)).strftime("%d.%m.%y-%H:%M")

                        cursor.execute(
                            'INSERT INTO boss_kills (boss_name, kill_time, respawn, message_id, channel_id) VALUES (?, ?, ?, ?, ?)',
                            (boss['boss_name'], new_kill_time, new_respawn_time, message.id, channel.id)
                        )

                        # –ü–æ–º–µ—á–∞–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é
                        cursor.execute(
                            'UPDATE boss_kills SET respawn_notified = 1 WHERE id = ?',
                            (boss['id'],)
                        )

                        conn.commit()
                        logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –±–æ—Å—Å–∞ {boss['boss_name']}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ—Å–ø–∞–≤–Ω–∞ –±–æ—Å—Å–∞ {boss['boss_name']}: {e}")

        conn.close()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ check_respawns: {e}")


def save_debug_image(image, name):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    debug_path = f"debug_images/{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}_{name}.png"
    image.save(debug_path, 'PNG')
    return debug_path


def enhance_image_for_ocr(image):
    """–£–ª—É—á—à–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenCV"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    original_path = save_debug_image(image, "01_original")
    logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {original_path}")

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –æ—Ç—Ç–µ–Ω–∫–∏ —Å–µ—Ä–æ–≥–æ
    if image.mode != 'L':
        image = image.convert('L')
    gray_path = save_debug_image(image, "02_gray")
    logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –æ—Ç—Ç–µ–Ω–∫–∞—Ö —Å–µ—Ä–æ–≥–æ: {gray_path}")

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º PIL Image –≤ numpy array –¥–ª—è OpenCV
    img_array = np.array(image)

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –±–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏—é –û—Ü—É
    _, img_bin = cv2.threshold(img_array, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
    bin_path = save_debug_image(Image.fromarray(img_bin), "03_binarized")
    logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –±–∏–Ω–∞—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {bin_path}")

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –¥–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Ä–∞–∑—Ä—ã–≤–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ
    kernel = np.ones((2, 2), np.uint8)
    img_morph = cv2.morphologyEx(img_bin, cv2.MORPH_CLOSE, kernel)
    morph_path = save_debug_image(Image.fromarray(img_morph), "04_morph")
    logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {morph_path}")

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç (–Ω–æ –Ω–µ —Å–ª–∏—à–∫–æ–º —Å–∏–ª—å–Ω–æ)
    img_contrast = cv2.convertScaleAbs(img_morph, alpha=1.5, beta=0)
    contrast_path = save_debug_image(Image.fromarray(img_contrast), "05_contrast")
    logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞: {contrast_path}")

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ PIL Image
    enhanced_image = Image.fromarray(img_contrast)

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å –ø–æ–º–æ—â—å—é PIL (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    enhancer = ImageEnhance.Sharpness(enhanced_image)
    enhanced_image = enhancer.enhance(1.2)

    final_path = save_debug_image(enhanced_image, "06_final")
    logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {final_path}")

    return enhanced_image


async def process_image_with_ocr(image_url):
    try:
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_url}")

        async with aiohttp.ClientSession() as session:
            async with session.get(image_url) as resp:
                if resp.status == 200:
                    image_data = await resp.read()
                    image = Image.open(io.BytesIO(image_data))

                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    if image.mode != 'RGB':
                        image = image.convert('RGB')

                    # –£–ª—É—á—à–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
                    image = enhance_image_for_ocr(image)

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–ø–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    temp_path = f"temp_images/{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.png"
                    image.save(temp_path, 'PNG')
                    logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {temp_path}")

                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º OCR –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
                    configs = [
                        r'--oem 3 --psm 6',
                        r'--oem 3 --psm 7',
                        r'--oem 3 --psm 8',
                        r'--oem 3 --psm 13'
                    ]

                    best_text = ""
                    best_config = ""

                    for config in configs:
                        try:
                            text = pytesseract.image_to_string(image, lang='eng', config=config)
                            logger.info(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –∫–æ–Ω—Ñ–∏–≥–æ–º {config}:\n{text}")

                            # –ï—Å–ª–∏ —ç—Ç–æ—Ç –∫–æ–Ω—Ñ–∏–≥ –¥–∞–ª –±–æ–ª—å—à–µ —Ç–µ–∫—Å—Ç–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
                            if len(text) > len(best_text):
                                best_text = text
                                best_config = config
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ —Å –∫–æ–Ω—Ñ–∏–≥–æ–º {config}: {e}")

                    logger.info(f"–õ—É—á—à–∏–π –∫–æ–Ω—Ñ–∏–≥: {best_config}")
                    logger.info(f"–õ—É—á—à–∏–π —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n{best_text}")

                    # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ª–æ–≥–æ–≤ –¥—Ä–æ–ø–∞
                    loot_pattern = r'\[\d{2}:\d{2}\].+acquired.+from'
                    loot_items = re.findall(loot_pattern, best_text)

                    logger.info(f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã: {loot_items}")

                    return loot_items, temp_path
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: —Å—Ç–∞—Ç—É—Å {resp.status}")
                    return [], None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return [], None


@bot.command()
async def spawn(ctx):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –±–æ—Å—Å–∞ —á–µ—Ä–µ–∑ —Ä–µ–∞–∫—Ü–∏–∏"""
    embed = discord.Embed(
        title="–í—ã–±–µ—Ä–∏—Ç–µ –±–æ—Å—Å–∞ –∫–æ—Ç–æ—Ä—ã–π –ø–æ—è–≤–∏–ª—Å—è",
        description="–ü–æ—Å—Ç–∞–≤—å—Ç–µ —Ä–µ–∞–∫—Ü–∏—é —Å –Ω–æ–º–µ—Ä–æ–º –±–æ—Å—Å–∞:",
        color=0x00ff00
    )

    for i, boss in enumerate(BOSS_LIST):
        embed.add_field(
            name=f"{BOSS_EMOJIS[i]} {boss}",
            value=f"–†–µ—Å–ø–∞–≤–Ω: {BOSS_RESPAWNS[boss]} —á–∞—Å–æ–≤",
            inline=False
        )

    message = await ctx.send(embed=embed)

    for i in range(len(BOSS_LIST)):
        await message.add_reaction(BOSS_EMOJIS[i])

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {ctx.author} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É !spawn")


@bot.event
async def on_reaction_add(reaction, user):
    if user.bot:
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –±–æ—Å—Å–∞ —á–µ—Ä–µ–∑ —Ä–µ–∞–∫—Ü–∏–∏
    if str(reaction.emoji) in BOSS_EMOJIS and reaction.message.author == bot.user:
        if not reaction.message.embeds:
            return

        embed = reaction.message.embeds[0]
        if embed.title != "–í—ã–±–µ—Ä–∏—Ç–µ –±–æ—Å—Å–∞ –∫–æ—Ç–æ—Ä—ã–π –ø–æ—è–≤–∏–ª—Å—è":
            return

        boss_index = BOSS_EMOJIS.index(str(reaction.emoji))
        if boss_index >= len(BOSS_LIST):
            return

        boss_name = BOSS_LIST[boss_index]
        await reaction.message.delete()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –≤—ã–±—Ä–∞–ª –±–æ—Å—Å–∞: {boss_name}")

        channel = discord.utils.get(reaction.message.guild.channels, name="boss_alert")
        if not channel:
            channel = reaction.message.channel

        message = await channel.send(
            f"@everyone\n"
            f"üî• –ë–û–°–° –ü–û–Ø–í–ò–õ–°–Ø!\n"
            f"{boss_name} - —Å–µ–π—á–∞—Å –ø–æ—è–≤–∏—Ç—Å—è\n\n"
            f"–ü–æ—Å—Ç–∞–≤—å—Ç–µ —Ä–µ–∞–∫—Ü–∏—é ‚úÖ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ —É—á–∞—Å—Ç–∏—è –Ω–∞ –±–æ—Å—Å–µ\n\n"
            f"üìç –î–µ–π—Å—Ç–≤–∏—è\n"
            f"‚úÖ - –£—á–∞—Å—Ç–≤—É—é –≤ —É–±–∏–π—Å—Ç–≤–µ –±–æ—Å—Å–∞\n"
            f"üí¨ - –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º –¥—Ä–æ–ø–∞ —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å —É–±–∏–π—Å—Ç–≤–æ –±–æ—Å—Å–∞"
        )

        await message.add_reaction('‚úÖ')

        now = datetime.datetime.now()
        kill_time = (now + datetime.timedelta(minutes=5)).strftime("%d.%m.%y-%H:%M")
        respawn_hours = BOSS_RESPAWNS[boss_name]
        respawn_time = (now + datetime.timedelta(hours=respawn_hours)).strftime("%d.%m.%y-%H:%M")

        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute(
            'INSERT INTO boss_kills (boss_name, kill_time, respawn, message_id, channel_id) VALUES (?, ?, ?, ?, ?)',
            (boss_name, kill_time, respawn_time, message.id, channel.id)
        )
        conn.commit()
        conn.close()

        logger.info(f"–°–æ–∑–¥–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–æ—Å—Å–µ {boss_name} (ID —Å–æ–æ–±—â–µ–Ω–∏—è: {message.id})")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—á–∞—Å—Ç–∏—è –≤ —É–±–∏–π—Å—Ç–≤–µ –±–æ—Å—Å–∞
    if str(reaction.emoji) == "‚úÖ" and reaction.message.channel.name == "boss_alert":
        conn = get_db_connection()
        cursor = conn.cursor()

        cursor.execute(
            'SELECT id, is_killed FROM boss_kills WHERE message_id = ?',
            (reaction.message.id,)
        )
        boss_kill = cursor.fetchone()

        if boss_kill and not boss_kill['is_killed']:
            cursor.execute(
                'SELECT * FROM boss_attendance WHERE boss_kill_id = ? AND user_id = ?',
                (boss_kill['id'], user.id)
            )
            existing = cursor.fetchone()

            if not existing:
                cursor.execute(
                    'INSERT INTO boss_attendance (boss_kill_id, user_id, username, attended) VALUES (?, ?, ?, 1)',
                    (boss_kill['id'], user.id, str(user))
                )
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –¥–æ–±–∞–≤–ª–µ–Ω –∫ —É—á–∞—Å—Ç–∏—é –≤ —É–±–∏–π—Å—Ç–≤–µ –±–æ—Å—Å–∞ (ID: {boss_kill['id']})")
            else:
                cursor.execute(
                    'UPDATE boss_attendance SET attended = 1 WHERE boss_kill_id = ? AND user_id = ?',
                    (boss_kill['id'], user.id)
                )
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —É—á–∞—Å—Ç–∏–µ –≤ —É–±–∏–π—Å—Ç–≤–µ –±–æ—Å—Å–∞ (ID: {boss_kill['id']})")

            conn.commit()
        conn.close()


@bot.event
async def on_reaction_remove(reaction, user):
    if user.bot:
        return

    if str(reaction.emoji) == "‚úÖ" and reaction.message.channel.name == "boss_alert":
        conn = get_db_connection()
        cursor = conn.cursor()

        cursor.execute(
            'SELECT id FROM boss_kills WHERE message_id = ?',
            (reaction.message.id,)
        )
        boss_kill = cursor.fetchone()

        if boss_kill:
            cursor.execute(
                'UPDATE boss_attendance SET attended = 0 WHERE boss_kill_id = ? AND user_id = ?',
                (boss_kill['id'], user.id)
            )
            conn.commit()
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –æ—Ç–º–µ–Ω–∏–ª —É—á–∞—Å—Ç–∏–µ –≤ —É–±–∏–π—Å—Ç–≤–µ –±–æ—Å—Å–∞ (ID: {boss_kill['id']})")
        conn.close()


@bot.event
async def on_message(message):
    if message.author.bot:
        await bot.process_commands(message)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –±–æ—Å—Å–∞—Ö
    if message.reference and message.reference.message_id:
        try:
            replied_message = await message.channel.fetch_message(message.reference.message_id)

            if (replied_message.author == bot.user and
                    replied_message.channel.name == "boss_alert" and
                    "üî• –ë–û–°–° –ü–û–Ø–í–ò–õ–°–Ø!" in replied_message.content):

                conn = get_db_connection()
                cursor = conn.cursor()

                cursor.execute(
                    'SELECT id, is_killed FROM boss_kills WHERE message_id = ?',
                    (replied_message.id,)
                )
                boss_kill = cursor.fetchone()

                if boss_kill and not boss_kill['is_killed']:
                    # –ü–æ–º–µ—á–∞–µ–º –±–æ—Å—Å–∞ –∫–∞–∫ —É–±–∏—Ç–æ–≥–æ
                    cursor.execute(
                        'UPDATE boss_kills SET is_killed = 1 WHERE id = ?',
                        (boss_kill['id'],)
                    )

                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–ª–æ–∂–µ–Ω–∏—è (—Å–∫—Ä–∏–Ω—à–æ—Ç—ã –¥—Ä–æ–ø–∞)
                    loot_items = []
                    screenshot_path = None

                    if message.attachments:
                        for attachment in message.attachments:
                            if any(attachment.filename.lower().endswith(ext) for ext in
                                   ['.png', '.jpg', '.jpeg', '.gif', '.bmp']):
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
                                screenshot_path = f"loot_screenshots/{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}_{attachment.filename}"
                                await attachment.save(screenshot_path)
                                logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω —Å–∫—Ä–∏–Ω—à–æ—Ç –¥—Ä–æ–ø–∞: {screenshot_path}")

                                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Å –ø–æ–º–æ—â—å—é OCR
                                items, _ = await process_image_with_ocr(attachment.url)
                                loot_items.extend(items)

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥—Ä–æ–ø–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    loot_text = "\n".join(loot_items) if loot_items else "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥—Ä–æ–ø"

                    cursor.execute(
                        'INSERT INTO boss_loot (boss_kill_id, user_id, username, screenshot_path, loot_text, created_at) VALUES (?, ?, ?, ?, ?, ?)',
                        (boss_kill['id'], message.author.id, str(message.author), screenshot_path, loot_text,
                         datetime.datetime.now().strftime("%d.%m.%y-%H:%M"))
                    )

                    conn.commit()

                    # –£–¥–∞–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é ‚úÖ –∏ –¥–æ–±–∞–≤–ª—è–µ–º ‚ò†Ô∏è
                    await replied_message.clear_reactions()
                    await replied_message.add_reaction('‚ò†Ô∏è')

                    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–æ—Å—Å–µ
                    new_content = replied_message.content.replace(
                        "üí¨ - –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º –¥—Ä–æ–ø–∞ —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å —É–±–∏–π—Å—Ç–≤–æ –±–æ—Å—Å–∞",
                        "‚ò†Ô∏è - –ë–æ—Å—Å —É–±–∏—Ç! –û—Ç–º–µ—Ç–∫–∏ —É—á–∞—Å—Ç–∏—è –∑–∞–∫—Ä—ã—Ç—ã."
                    )
                    await replied_message.edit(content=new_content)

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥—Ä–æ–ø–µ
                    if loot_items:
                        loot_info = "\n".join([f"‚Ä¢ {item}" for item in loot_items[:5]])
                        if len(loot_items) > 5:
                            loot_info += f"\n‚Ä¢ ... –∏ –µ—â–µ {len(loot_items) - 5} –ø—Ä–µ–¥–º–µ—Ç–æ–≤"

                        await message.channel.send(
                            f"{message.author.mention} –æ—Ç–º–µ—Ç–∏–ª(–∞) —É–±–∏–π—Å—Ç–≤–æ –±–æ—Å—Å–∞!\n"
                            f"üì¶ –í—ã–±–∏—Ç—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:\n{loot_info}"
                        )
                        logger.info(f"–£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã –ø—Ä–µ–¥–º–µ—Ç—ã: {loot_items}")
                    else:
                        await message.channel.send(
                            f"{message.author.mention} –æ—Ç–º–µ—Ç–∏–ª(–∞) —É–±–∏–π—Å—Ç–≤–æ –±–æ—Å—Å–∞!\n"
                            f"üì¶ –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."
                        )
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ {screenshot_path}")

                conn.close()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    await bot.process_commands(message)


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥—Ä–æ–ø–∞ —Å –±–æ—Å—Å–∞
@bot.command()
async def loot(ctx, boss_kill_id: int = None):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥—Ä–æ–ø —Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —É–±–∏–π—Å—Ç–≤–∞ –±–æ—Å—Å–∞"""
    conn = get_db_connection()
    cursor = conn.cursor()

    if boss_kill_id:
        cursor.execute(
            'SELECT bl.*, bk.boss_name FROM boss_loot bl JOIN boss_kills bk ON bl.boss_kill_id = bk.id WHERE bl.boss_kill_id = ?',
            (boss_kill_id,)
        )
        loot_data = cursor.fetchall()

        if not loot_data:
            await ctx.send("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –æ –¥—Ä–æ–ø–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ ID —É–±–∏–π—Å—Ç–≤–∞.")
            conn.close()
            return

        embed = discord.Embed(title=f"–î—Ä–æ–ø —Å {loot_data[0]['boss_name']}", color=0x00ff00)

        for loot in loot_data:
            loot_text = loot['loot_text'] if loot['loot_text'] else "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥—Ä–æ–ø"
            embed.add_field(
                name=f"–û—Ç {loot['username']}",
                value=f"```{loot_text[:500]}...```" if len(loot_text) > 500 else f"```{loot_text}```",
                inline=False
            )

        await ctx.send(embed=embed)
        logger.info(f"–ü–æ–∫–∞–∑–∞–Ω –¥—Ä–æ–ø –¥–ª—è —É–±–∏–π—Å—Ç–≤–∞ –±–æ—Å—Å–∞ ID: {boss_kill_id}")
    else:
        cursor.execute('''
            SELECT bk.id, bk.boss_name, bk.kill_time, COUNT(bl.id) as loot_count 
            FROM boss_kills bk 
            LEFT JOIN boss_loot bl ON bk.id = bl.boss_kill_id 
            WHERE bk.is_killed = 1 
            GROUP BY bk.id 
            ORDER BY bk.kill_time DESC 
            LIMIT 5
        ''')
        recent_kills = cursor.fetchall()

        if not recent_kills:
            await ctx.send("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± —É–±–∏–π—Å—Ç–≤–∞—Ö –±–æ—Å—Å–æ–≤.")
            conn.close()
            return

        embed = discord.Embed(title="–ü–æ—Å–ª–µ–¥–Ω–∏–µ —É–±–∏–π—Å—Ç–≤–∞ –±–æ—Å—Å–æ–≤", color=0x00ff00)

        for kill in recent_kills:
            embed.add_field(
                name=f"{kill['boss_name']} ({kill['kill_time']})",
                value=f"ID: {kill['id']}, –î—Ä–æ–ø–æ–≤: {kill['loot_count']}",
                inline=False
            )

        embed.set_footer(text="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ !loot <ID> –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –¥—Ä–æ–ø–∞")
        await ctx.send(embed=embed)
        logger.info("–ü–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ —É–±–∏–π—Å—Ç–≤–∞ –±–æ—Å—Å–æ–≤")

    conn.close()


@bot.command()
async def boss_rate(ctx, member: discord.Member = None):
    if member is None:
        member = ctx.author

    conn = get_db_connection()
    cursor = conn.cursor()

    today = datetime.datetime.now().strftime("%d.%m.%y")
    cursor.execute(
        'SELECT COUNT(*) FROM boss_kills WHERE kill_time LIKE ?',
        (f'{today}%',)
    )
    total_bosses_today = cursor.fetchone()[0] or 0

    cursor.execute(
        '''SELECT COUNT(*) FROM boss_attendance 
           INNER JOIN boss_kills ON boss_attendance.boss_kill_id = boss_kills.id 
           WHERE boss_attendance.user_id = ? AND boss_attendance.attended = 1 
           AND boss_kills.kill_time LIKE ?''',
        (member.id, f'{today}%')
    )
    attended_today = cursor.fetchone()[0] or 0

    week_ago = (datetime.datetime.now() - datetime.timedelta(days=7)).strftime("%d.%m.%y")
    cursor.execute(
        'SELECT COUNT(*) FROM boss_kills WHERE kill_time >= ?',
        (week_ago,)
    )
    total_bosses_week = cursor.fetchone()[0] or 0

    cursor.execute(
        '''SELECT COUNT(*) FROM boss_attendance 
           INNER JOIN boss_kills ON boss_attendance.boss_kill_id = boss_kills.id 
           WHERE boss_attendance.user_id = ? AND boss_attendance.attended = 1 
           AND boss_kills.kill_time >= ?''',
        (member.id, week_ago)
    )
    attended_week = cursor.fetchone()[0] or 0

    cursor.execute(
        'SELECT COUNT(*) FROM boss_kills'
    )
    total_bosses = cursor.fetchone()[0] or 0

    cursor.execute(
        '''SELECT COUNT(*) FROM boss_attendance 
           INNER JOIN boss_kills ON boss_attendance.boss_kill_id = boss_kills.id 
           WHERE boss_attendance.user_id = ? AND boss_attendance.attended = 1''',
        (member.id,)
    )
    attended_total = cursor.fetchone()[0] or 0

    conn.close()

    rate_today = (attended_today / total_bosses_today * 100) if total_bosses_today > 0 else 0
    rate_week = (attended_week / total_bosses_week * 100) if total_bosses_week > 0 else 0
    rate_total = (attended_total / total_bosses * 100) if total_bosses > 0 else 0

    embed = discord.Embed(title=f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –¥–ª—è {member.display_name}")
    embed.add_field(name="–°–µ–≥–æ–¥–Ω—è", value=f"{attended_today}/{total_bosses_today} ({rate_today:.1f}%)")
    embed.add_field(name="–ó–∞ –Ω–µ–¥–µ–ª—é", value=f"{attended_week}/{total_bosses_week} ({rate_week:.1f}%)")
    embed.add_field(name="–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è", value=f"{attended_total}/{total_bosses} ({rate_total:.1f}%)")

    await ctx.send(embed=embed)
    logger.info(f"–ü–æ–∫–∞–∑–∞–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {member.display_name}")


@bot.event
async def on_command_error(ctx, error):
    if isinstance(error, commands.CommandNotFound):
        await ctx.send("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!")
    else:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {error}")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    try:
        bot.run(TOKEN)
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")